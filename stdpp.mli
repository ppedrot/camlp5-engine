(* camlp4r *)
(***********************************************************************)
(*                                                                     *)
(*                             Camlp4                                  *)
(*                                                                     *)
(*                Daniel de Rauglaudre, INRIA Rocquencourt             *)
(*                                                                     *)
(*  Copyright 2007 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* This file has been generated by program: do not edit! *)

(** Standard definitions. *)

type location;;

exception Exc_located of location * exn;;
   (** [Exc_located loc e] is an encapsulation of the exception [e] with
       the input location [loc]. To be used in quotation expanders
       and in grammars to specify some input location for an error.
       Do not raise this exception directly: rather use the following
       function [raise_with_loc]. *)

val raise_with_loc : location -> exn -> 'a;;
   (** [raise_with_loc loc e], if [e] is already the exception [Exc_located],
       re-raise it, else raise the exception [Exc_located loc e]. *)

val make_lined_loc : int -> int -> int * int -> location;;
   (** [make_lined_loc line_nb bol_pos (bp, ep)] creates a location starting
       at line number [line_nb], where the position of the beginning of the
       line is [bol_pos] and between the positions [bp] (included) and [ep]
       excluded. The positions are in number of characters since the begin
       of the stream. *)

val first_pos : location -> int;;
   (** [first_pos loc] returns the position of the begin of the location in
       number of characters since the beginning of the stream. *)
val last_pos : location -> int;;
   (** [first_pos loc] returns the position of the first character not
       of the location in number of characters since the beginning of
       the stream. *)
val line_nb : location -> int;;
   (** [line_nb loc] returns the line number of the location or [-1] if
       the location does not contain a line number (i.e. built the old
       way with [make_loc] below. *)
val bol_pos : location -> int;;
   (** [line_nb loc] returns the position of the beginning of the line
       of the location in number of characters since the beginning of
       the stream, or [0] if the location does not contain a line number
       (i.e. built the old with with [make_loc] below. *)
val encl_loc : location -> location -> location;;
   (** [encl_loc loc1 loc2] returns the location starting at the smallest
       start and ending at the greatest end of the locations [loc1] and
       [loc2]. In simple words, it is the location enclosing [loc1] and
       [loc2]. *)
val shift_loc : int -> location -> location;;
   (** [shift_loc sh loc] returns the location [loc] shifted with [sh]
       characters. The line number is not recomputed. *)
val sub_loc : location -> int -> int -> location;;
   (** [sub_loc loc sh len] is the location [loc] shifted with [sh] characters
       and with length [len]. The previous ending position of the location
       is lost. *)
val after_loc : location -> int -> int -> location;;
   (** [after_loc loc sh len] is the location just after loc (starting at
       the end position of [loc]) shifted with [sh] characters and of length
       [len]. *)

val loc_name : string ref;;
   (** Name of the location variable used in grammars and in the predefined
       quotations for OCaml syntax trees. Default: [loc] *)

val dummy_loc : location;;

(* for compatibility with other versions using locations *)

val line_of_loc : string -> location -> string * int * int * int;;
   (** [line_of_loc fname loc] reads the file [fname] up to the
       location [loc] and returns the real input file, the line number
       and the characters location in the line; the real input file
       can be different from [fname] because of possibility of line
       directives typically generated by /lib/cpp. *)
val make_loc : int * int -> location;;
   (** [make_loc (bp, ep)] creates a location between the positions bp
       (included) and ep (excluded), each of them being the number of
       characters since the beginning of the stream. The location created
       does not contain the line number. *)
