(* camlp4r *)
(***********************************************************************)
(*                                                                     *)
(*                             Camlp4                                  *)
(*                                                                     *)
(*        Daniel de Rauglaudre, projet Cristal, INRIA Rocquencourt     *)
(*                                                                     *)
(*  Copyright 2002 Institut National de Recherche en Informatique et   *)
(*  Automatique.  Distributed only by permission.                      *)
(*                                                                     *)
(***********************************************************************)

(* This file has been generated by program: do not edit! *)

(** Standard definitions. *)

type location;;

exception Exc_located of location * exn;;
   (** [Exc_located loc e] is an encapsulation of the exception [e] with
       the input location [loc]. To be used in quotation expanders
       and in grammars to specify some input location for an error.
       Do not raise this exception directly: rather use the following
       function [raise_with_loc]. *)

val raise_with_loc : location -> exn -> 'a;;
   (** [raise_with_loc loc e], if [e] is already the exception [Exc_located],
       re-raise it, else raise the exception [Exc_located loc e]. *)

val line_of_loc : string -> location -> string * int * int * int;;
   (** [line_of_loc fname loc] reads the file [fname] up to the
       location [loc] and returns the real input file, the line number
       and the characters location in the line; the real input file
       can be different from [fname] because of possibility of line
       directives typically generated by /lib/cpp. *)

val loc_name : string ref;;
   (** Name of the location variable used in grammars and in the predefined
       quotations for OCaml syntax trees. Default: [loc] *)

val dummy_loc : location;;
val make_loc : int * int -> location;;
val first_pos : location -> int;;
val last_pos : location -> int;;

val make_lined_loc : int -> int -> int * int -> location;;
val line_nb : location -> int;;
val bol_pos : location -> int;;

val encl_loc : location -> location -> location;;
val shift_loc : int -> location -> location;;
val sub_loc : location -> int -> int -> location;;
val after_loc : location -> int -> int -> location;;
