(* camlp5r *)
(* This file has been generated by program: do not edit! *)
(* Copyright (c) INRIA 2007-2010 *)

(* #load "pa_macro.cmo" *)

exception GiveUp;;

let line_length = ref 78;;
let horiz_ctx = ref false;;

let after_print s =
  if !horiz_ctx then
    if String.contains s '\n' || String.length s > !line_length then
      raise GiveUp
    else s
  else s
;;

let scan_format rev_sl fmt i doprn =
  match fmt.[i+1] with
    'c' ->
      Obj.magic (fun (c : char) -> doprn (String.make 1 c :: rev_sl) (i + 2))
   | 'd' ->
      Obj.magic (fun (d : int) -> doprn (string_of_int d :: rev_sl) (i + 2))
  | 's' -> Obj.magic (fun (s : string) -> doprn (s :: rev_sl) (i + 2))
  | c ->
      failwith (Printf.sprintf "Pretty.sprintf \"%s\" '%%%c' not impl" fmt c)
;;
let printf_kprintf kont fmt =
  let fmt : string = Obj.magic fmt in
  let len = String.length fmt in
  let rec doprn rev_sl i =
    if i >= len then
      let s = String.concat "" (List.rev rev_sl) in Obj.magic (kont s)
    else
      match fmt.[i] with
        '%' -> scan_format rev_sl fmt i doprn
      | c -> doprn (String.make 1 c :: rev_sl) (i + 1)
  in
  doprn [] 0
;;
let sprintf fmt = printf_kprintf after_print fmt;;

let horiz_vertic horiz vertic =
  try Ploc.call_with horiz_ctx true horiz () with
    GiveUp -> if !horiz_ctx then raise GiveUp else vertic ()
;;

let horizontally () = !horiz_ctx;;
